// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for identifying risks within a legal document and suggesting counter-proposals.
 *
 * - identifyRisksAndSuggestCounterProposals - A function that takes legal document text as input, identifies potential risks, highlights risky clauses, and suggests counter-proposals.
 * - IdentifyRisksAndSuggestCounterProposalsInput - The input type for the identifyRisksAndSuggestCounterProposals function.
 * - IdentifyRisksAndSuggestCounterProposalsOutput - The return type for the identifyRisksAndSuggestCounterProposals function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const IdentifyRisksAndSuggestCounterProposalsInputSchema = z.object({
  legalDocument: z
    .string()
    .describe('The legal document text to analyze for potential risks.'),
});
export type IdentifyRisksAndSuggestCounterProposalsInput = z.infer<
  typeof IdentifyRisksAndSuggestCounterProposalsInputSchema
>;

const IdentifyRisksAndSuggestCounterProposalsOutputSchema = z.object({
    summary: z.string().describe("A clear, plain-language summary of key clauses."),
    risks: z.array(z.string()).describe("A list of risks, e.g., hidden penalties, auto-renewals, vague obligations, unfavorable termination clauses."),
    recommendations: z.array(z.string()).describe("Actionable recommendations for the user, e.g., negotiate renewal period, clarify liability scope."),
    confidence_scores: z.record(z.string(), z.enum(["High", "Medium", "Low"])).describe("A confidence level for each risk flag (high, medium, low)."),
    flagged_text_snippets: z.array(z.string()).describe("The exact text snippets from the document that triggered each risk flag."),
  });
export type IdentifyRisksAndSuggestCounterProposalsOutput = z.infer<
  typeof IdentifyRisksAndSuggestCounterProposalsOutputSchema
>;

export async function identifyRisksAndSuggestCounterProposals(
  input: IdentifyRisksAndSuggestCounterProposalsInput
): Promise<IdentifyRisksAndSuggestCounterProposalsOutput> {
  return identifyRisksAndSuggestCounterProposalsFlow(input);
}

const identifyRisksAndSuggestCounterProposalsPrompt = ai.definePrompt({
  name: 'identifyRisksAndSuggestCounterProposalsPrompt',
  input: {schema: IdentifyRisksAndSuggestCounterProposalsInputSchema},
  output: {schema: IdentifyRisksAndSuggestCounterProposalsOutputSchema},
  prompt: `You are a legal AI assistant specializing in document parsing and risk identification. Your task is to analyze uploaded legal documents (contracts, rental agreements, NDAs, service terms) and provide:

A clear, plain-language summary of key clauses.

Risk flags (e.g., hidden penalties, auto-renewals, vague obligations, unfavorable termination clauses).

Actionable recommendations for the user (e.g., negotiate renewal period, clarify liability scope, avoid one-sided penalty clause).

A confidence level for each risk flag (High, Medium, Low).

Highlight exact text snippets from the document that triggered each risk flag.

[INPUT]
Contract text: "{{legalDocument}}"

[OUTPUT FORMAT] (JSON)
Format the response in JSON with keys: summary, risks, recommendations, confidence_scores, and flagged_text_snippets.
`,
});

const identifyRisksAndSuggestCounterProposalsFlow = ai.defineFlow(
  {
    name: 'identifyRisksAndSuggestCounterProposalsFlow',
    inputSchema: IdentifyRisksAndSuggestCounterProposalsInputSchema,
    outputSchema: IdentifyRisksAndSuggestCounterProposalsOutputSchema,
  },
  async input => {
    const {output} = await identifyRisksAndSuggestCounterProposalsPrompt(input);
    return output!;
  }
);
