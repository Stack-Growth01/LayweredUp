// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for identifying risks within a legal document and suggesting counter-proposals.
 *
 * - identifyRisksAndSuggestCounterProposals - A function that takes legal document text as input, identifies potential risks, highlights risky clauses, and suggests counter-proposals.
 * - IdentifyRisksAndSuggestCounterProposalsInput - The input type for the identifyRisksAndSuggestCounterProposals function.
 * - IdentifyRisksAndSuggestCounterProposalsOutput - The return type for the identifyRisksAndSuggestCounterProposals function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const IdentifyRisksAndSuggestCounterProposalsInputSchema = z.object({
  legalDocument: z
    .string()
    .describe('The legal document text to analyze for potential risks.'),
});
export type IdentifyRisksAndSuggestCounterProposalsInput = z.infer<
  typeof IdentifyRisksAndSuggestCounterProposalsInputSchema
>;

const IdentifyRisksAndSuggestCounterProposalsOutputSchema = z.array(
  z.object({
    clause_type: z.enum([
        "Term",
        "Payment",
        "Deposit",
        "Termination",
        "Liability",
        "Confidentiality",
        "Governing Law",
        "Arbitration",
        "Miscellaneous"
    ]).describe("The category of the clause."),
    clause_text: z.string().describe("The full text of the clause."),
    risk_flag: z.boolean().describe("Whether the clause is considered risky or unusual."),
    risk_reason: z.string().nullable().describe("A brief explanation of why the clause is risky. Null if not risky."),
  })
);
export type IdentifyRisksAndSuggestCounterProposalsOutput = z.infer<
  typeof IdentifyRisksAndSuggestCounterProposalsOutputSchema
>;

export async function identifyRisksAndSuggestCounterProposals(
  input: IdentifyRisksAndSuggestCounterProposalsInput
): Promise<IdentifyRisksAndSuggestCounterProposalsOutput> {
  return identifyRisksAndSuggestCounterProposalsFlow(input);
}

const identifyRisksAndSuggestCounterProposalsPrompt = ai.definePrompt({
  name: 'identifyRisksAndSuggestCounterProposalsPrompt',
  input: {schema: IdentifyRisksAndSuggestCounterProposalsInputSchema},
  output: {schema: IdentifyRisksAndSuggestCounterProposalsOutputSchema},
  prompt: `[ROLE]
You are a contract clause detection assistant.

[INPUT]
Contract text: "{{legalDocument}}"

[INSTRUCTIONS]
1. Detect and categorize clauses into one of the following buckets:
   [Term, Payment, Deposit, Termination, Liability, Confidentiality, Governing Law, Arbitration, Miscellaneous]
2. Highlight any risky or unusual terms, e.g., unilateral rights, vague timeframes, unlimited liability.
3. For each clause, explain briefly WHY it may be risky.

[OUTPUT FORMAT] (JSON array)
Respond with a JSON array that matches the output schema.
`,
});

const identifyRisksAndSuggestCounterProposalsFlow = ai.defineFlow(
  {
    name: 'identifyRisksAndSuggestCounterProposalsFlow',
    inputSchema: IdentifyRisksAndSuggestCounterProposalsInputSchema,
    outputSchema: IdentifyRisksAndSuggestCounterProposalsOutputSchema,
  },
  async input => {
    const {output} = await identifyRisksAndSuggestCounterProposalsPrompt(input);
    return output!;
  }
);
