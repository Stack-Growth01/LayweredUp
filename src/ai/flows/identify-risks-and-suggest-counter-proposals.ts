// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for identifying risks within a legal document and suggesting counter-proposals.
 *
 * - identifyRisksAndSuggestCounterProposals - A function that takes legal document text as input, identifies potential risks, highlights risky clauses, and suggests counter-proposals.
 * - IdentifyRisksAndSuggestCounterProposalsInput - The input type for the identifyRisksAndSuggestCounterProposals function.
 * - IdentifyRisksAndSuggestCounterProposalsOutput - The return type for the identifyRisksAndSuggestCounterProposals function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const IdentifyRisksAndSuggestCounterProposalsInputSchema = z.object({
  legalDocument: z
    .string()
    .describe('The legal document text to analyze for potential risks.'),
  role: z.string().describe('The role of the user (tenant, landlord, freelancer, SMB, etc.)'),
});
export type IdentifyRisksAndSuggestCounterProposalsInput = z.infer<
  typeof IdentifyRisksAndSuggestCounterProposalsInputSchema
>;

const IdentifyRisksAndSuggestCounterProposalsOutputSchema = z.object({
  summary: z.string().describe('A summary of the identified risks.'),
  risks: z
    .array(
      z.object({
        clause: z.string().describe('The specific clause identified as risky.'),
        summary: z.string().describe('A plain language summary of the clause.'),
        counterProposal: z
          .string()
          .describe('A suggested counter-proposal for the risky clause.'),
        riskLevel: z.enum(['risky', 'standard', 'negotiable']).describe('The risk level of the clause.'),
      })
    )
    .describe('A list of identified risks, their summaries, and suggested counter-proposals.'),
});
export type IdentifyRisksAndSuggestCounterProposalsOutput = z.infer<
  typeof IdentifyRisksAndSuggestCounterProposalsOutputSchema
>;

export async function identifyRisksAndSuggestCounterProposals(
  input: IdentifyRisksAndSuggestCounterProposalsInput
): Promise<IdentifyRisksAndSuggestCounterProposalsOutput> {
  return identifyRisksAndSuggestCounterProposalsFlow(input);
}

const identifyRisksAndSuggestCounterProposalsPrompt = ai.definePrompt({
  name: 'identifyRisksAndSuggestCounterProposalsPrompt',
  input: {schema: IdentifyRisksAndSuggestCounterProposalsInputSchema},
  output: {schema: IdentifyRisksAndSuggestCounterProposalsOutputSchema},
  prompt: `You are an AI legal assistant that identifies risks in legal documents and suggests counter-proposals.

You will be provided with a legal document and the role of the user. 
Based on the role, you will identify potential risks, summarize the risky clauses in plain language, and suggest counter-proposals.

Legal Document:
{{legalDocument}}

Role: {{role}}

Output the summary of the identified risks, and a list of the risky clauses with summaries and counter-proposals. Ensure the riskLevel field is correctly assigned as either \"risky\", \"standard\", or \"negotiable\".
`,
});

const identifyRisksAndSuggestCounterProposalsFlow = ai.defineFlow(
  {
    name: 'identifyRisksAndSuggestCounterProposalsFlow',
    inputSchema: IdentifyRisksAndSuggestCounterProposalsInputSchema,
    outputSchema: IdentifyRisksAndSuggestCounterProposalsOutputSchema,
  },
  async input => {
    const {output} = await identifyRisksAndSuggestCounterProposalsPrompt(input);
    return output!;
  }
);
